// lalrpop 里的约定
use crate::ast::exp::*;
use crate::ast::statements::*;

grammar;

// 约束 lexer 的行为
match {
  r"\s*" => {}, // 跳过空白符
  r"//[^\n\r]*[\n\r]*" => {}, //跳过单行注释
  r"/\*([^*]|\*[^/])*\*/" => {}, //跳过多行注释
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit {func_def};

// 同上, 不解释
FuncDef: FuncDef = {
  <return_type: BType> <func_id: Id> "(" ")" <block: Block> => {
    FuncDef{return_type: return_type, func_id: func_id, block: block}
  }
}

BType: BType = {
  "int" => BType{type_name: "int".to_string()}
}

Decl: Decl ={
  <const_decl:ConstDecl> => Decl::ConstDecl(const_decl),
}

ConstDecl: ConstDecl = "const" <type_name: BType> <c: ConstDef> <cs: ("," <ConstDef>)*> ";" => {
  let mut vec = Vec::<ConstDef>::new();
  vec.push(c);
  for cc in cs {
    vec.push(cc);
  }
  ConstDecl::ConstDecl(type_name, vec)
};

ConstDef: ConstDef = {
  <ident:IDENT> "=" <const_initval:ConstInitVal> => ConstDef::Default(ident,const_initval),
}
ConstInitVal: ConstInitVal ={
  <const_exp:ConstExp> => ConstInitVal::ConstExp(const_exp),
}

ConstExp: ConstExp ={
  <exp:Exp> => ConstExp::Exp(exp),
}

LVal: LVal={
  <ident:IDENT> => LVal::IDENT(ident),
}

Block: Block = "{" <block_items: (BlockItem)*> "}" => Block::Block(block_items);

BlockItem : BlockItem ={
  <decl:Decl> => BlockItem::Decl(decl),
  <stmt:Stmt> => BlockItem::Stmt(stmt),
}
Stmt: Stmt =  {
  "return" <exp: Exp> ";" => Stmt::ReturnStmt(exp),
  //<lval:LVal> "=" <exp:Exp> => Stmt::AssignStmt(lval,exp),
}

Number: Number = {
  <int_const: IntConst> => Number::IntConst(int_const)
}

Exp:Exp = {
  <lor_exp:LOrExp> =>Exp::LOrExp(lor_exp),
}
PrimaryExp: PrimaryExp = {
  "(" <exp:Exp> ")" => PrimaryExp::BracedExp(Box::new(exp)),
  <number:Number> => PrimaryExp::Number(number),
  <lval:LVal> => PrimaryExp::LVal(lval),
}

UnaryExp: UnaryExp = {
  <primary_exp:PrimaryExp> => UnaryExp::PrimaryExp(primary_exp),
  "+" <unary_exp:UnaryExp> => UnaryExp::PlusUnaryExp(Box::new(unary_exp)),
  "-" <unary_exp:UnaryExp> => UnaryExp::MinusUnaryExp(Box::new(unary_exp)),
  "!" <unary_exp:UnaryExp> => UnaryExp::NotUnaryExp(Box::new(unary_exp)),
}
MulExp: MulExp ={
  <unary_exp:UnaryExp> => MulExp::UnaryExp(unary_exp),
  <mul_exp:MulExp> "*" <unary_exp:UnaryExp> => MulExp::BinaryMulExp(Box::new(mul_exp),unary_exp),
  <mul_exp:MulExp> "/" <unary_exp:UnaryExp> => MulExp::BinaryDivExp(Box::new(mul_exp),unary_exp),
  <mul_exp:MulExp> "%" <unary_exp:UnaryExp> => MulExp::BinaryModExp(Box::new(mul_exp),unary_exp),

}
AddExp:AddExp = {
  <mul_exp:MulExp> => AddExp::MulExp(mul_exp),
  <add_exp:AddExp> "+" <mul_exp:MulExp> => AddExp::BinaryAddExp(Box::new(add_exp),mul_exp),
  <add_exp:AddExp> "-" <mul_exp:MulExp> => AddExp::BinarySubExp(Box::new(add_exp),mul_exp),

}
RelExp:RelExp ={
  <add_exp:AddExp> => RelExp::AddExp(add_exp),
  <rel_exp:RelExp> "<" <add_exp:AddExp> => RelExp::BinaryLtRelExp(Box::new(rel_exp),add_exp),
  <rel_exp:RelExp> ">" <add_exp:AddExp> => RelExp::BinaryGtRelExp(Box::new(rel_exp),add_exp),
  <rel_exp:RelExp> "<=" <add_exp:AddExp> => RelExp::BinaryLeRelExp(Box::new(rel_exp),add_exp),
  <rel_exp:RelExp> ">=" <add_exp:AddExp> => RelExp::BinaryGeRelExp(Box::new(rel_exp),add_exp),

}
EqExp:EqExp ={
  <rel_exp:RelExp> => EqExp::RelExp(rel_exp),
  <eq_exp:EqExp> "==" <rel_exp:RelExp> => EqExp::BinaryEqExp(Box::new(eq_exp),rel_exp),
  <eq_exp:EqExp> "!=" <rel_exp:RelExp> => EqExp::BinaryNotEqExp(Box::new(eq_exp),rel_exp),
  
}
LAndExp:LAndExp = {
  <eq_exp:EqExp> => LAndExp::EqExp(eq_exp),
  <land_exp:LAndExp> "&&" <eq_exp:EqExp> => LAndExp::BinaryLAndExp(Box::new(land_exp),eq_exp),
}
LOrExp:LOrExp ={
  <land_exp:LAndExp> => LOrExp::LAndExp(land_exp),
  <lor_exp:LOrExp> "||" <land_exp:LAndExp> => LOrExp::BinaryLOrExp(Box::new(lor_exp),land_exp),

}
// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Id: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

IDENT: IDENT = r"[_a-zA-Z][_a-zA-Z0-9]*" => IDENT{content: <>.to_string()};